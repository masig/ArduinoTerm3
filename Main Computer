local EntrancePass = "OG"              --Sets EntrancePass as "OG"
local ExitPass = "OG2"                 --Sets ExitPass to OG2
local MasterPass = "admin"             --Sets MasterPass to "admin"
local passtimes = 3                    --Sets the amount of password attempts to 3
local passcheck = 2                    --Sets passcheck to value of 2
local MasterPassNew                    --Sets MasterPassNew to a string that will be determined later
local ExitPassNew                      --Sets ExitPassNew to a value to be determined by user
local EntrancePassNew                  --Sets EntrancePassNew to a string to be determined by user.
 
os.pullEvent = os.pullEventRaw         --Prevents people from terminating the program
while true do
sleep(0.1)
rednet.open("back")
 
    passcheck = 2
    while passcheck > 1 do                          --Runs a constant loop to check password input
    sleep(0.1)
    term.clear()                           --Clears the input after every attempt
    term.setCursorPos(1,1)                 --Sets the input position
    print("Please Enter Password:")        --Sets the prompt for the program  
    local VaultPass = read("*")                --Makes sure inputs display as stars
   
 
         if VaultPass == "admin" then                --Checks if the input entered is "OG"
         passcheck = 1                                        
         passtimes = 3
         print("Welcome to the main command computer")
         sleep(1)                             --keeps the signal shut for 5 seconds
         term.clear()
         term.setTextColor(colors.green)
         term.setCursorPos(1,1)
         print("To edit a password, type the name it is labelled as in the input")
         sleep(0.1)
         term.setTextColor(colors.red)
         term.setCursorPos(1,3)
         print("MainEntrancePassword: " ..EntrancePass.. " ")
         sleep(0.1)
         term.setCursorPos(1,5)
         print("MainExitPassword: " ..ExitPass.. " ")
         sleep(0.1)
         term.setCursorPos(1,7)
         print("MasterPCPassword: " ..MasterPass.. " ")
         sleep(0.1)
  --while true do
        term.setCursorPos(1,9)
        print("Edit:")
            while true do
            sleep(0.1)
            term.setCursorPos(1,10)
            local edit = read()
--local edit = "MainExitPassword"
                if edit == "MainExitPassword" then
                term.clear()
                term.setCursorPos(1,1)
                print("MainExitPassword:")
                sleep(0.1)
                term.setCursorPos(1,3)
                print("Current Password:" ..ExitPass.." ")
                sleep(0.1)
                term.setCursorPos(1,5)
                print("To change password, write: 'edit' in the input")
                sleep(0.1)
                term.setCursorPos(1,7)
                local ExitPassEdit = read()
               
                    if MasterPassEdit == 'edit' then
                    sleep(0.1)
                    term.clear()
                    term.setCursorPos(1,1)
                    print("Enter what you want to change the password to")
                    term.setCursorPos(1,3)
                    local MasterPassNew = read()
                    MasterPass = MasterPassNew
                    --elseif MasterPassEdit == 'back' then
                   
                    else
                    exit()
                    end
                   
           
 
                elseif edit == "MainEntrancePassword" then
                term.clear()
                term.setCursorPos(1,1)
                print("MainEntrancePassword:")
                sleep(0.1)
                term.setCursorPos(1,3)
                print("Current Password:" ..EntrancePass.." ")
                sleep(0.1)
                term.setCursorPos(1,5)
                print("To change password, write: 'edit' in the input")
                sleep(0.1)
                setCursorPos(1,7)
                local EntrancePassEdit = read()
               
                    if EntrancePassEdit == 'edit' then
                    sleep(0.1)
                    term.clear()
                    term.setCursorPos(1,1)
                    print("Enter what you want to change the password to")
                    term.setCursorPos(1,3)
                    local EntrancePassNew = read()
                    EntrancePass = EntrancePassNew
                    rednet.send(739, EntrancePass)
                   -- elseif MasterPassEdit == 'back'
                   
                    else
                    exit()
                    end
           
 
 
                elseif edit == "MasterPCPassword" then
                term.clear()
                term.setCursorPos(1,1)
                print("MainPCPassword:")
                sleep(0.1)
                term.setCursorPos(1,3)
                print("Current Password:" ..MasterPass.." ")
                sleep(0.1)
                term.setCursorPos(1,5)
                print("To change password, write: 'edit' in the input")
                sleep(0.1)
                term.setCursorPos(1,7)
                local MasterPassEdit = read()
       
                    if MasterPassEdit == 'edit' then
                    sleep(0.1)
                    term.clear()
                    term.setCursorPos(1,1)
                    print("Enter what you want to change the password to:")
                    term.setCursorPos(1,3)
                    local MasterPassNew = read()
                    MasterPass = MasterPassNew
                   -- elseif MasterPassEdit == 'back'
                   
                   
                    else
                    exit()
                    end
               end
            end
 
  elseif VaultPass == "terminate" then     --If input = "terminate"
  exit()                               --Exits the program
 
  else                                   --if any other case is detected
  passtimes = passtimes - 1
  print("Password Incorrect, you have "..  passtimes .."  more attempt(s)")      --It will display that the password is incorrect
  sleep(3)                             --displays the message for one second then resets
    if passtimes < 1 then
    print("Maximum attempts reached. Try again in 2 minutes")
    rs.setOutput("left", true)
    sleep(120)
    end
  end
  end
  end
